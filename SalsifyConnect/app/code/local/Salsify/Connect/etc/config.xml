<?xml version="1.0" encoding="UTF-8"?>
<config>
  <!--
  note: in some places here salsify_connect MUST refer to the module, which is
  company_module. in others it's simply used as a unique identifier. frankly i
  don't know with any certainty which is which, but sticking with it everywhere
  a block of XML needs an identifier tends to be pretty safe.
  -->


  <!-- TODO need to add dependencies for ApiImport -->

  <modules>
    <Salsify_Connect>
      <version>0.0.1</version>
    </Salsify_Connect>
  </modules>


  <global>
    <helpers>
      <salsify_connect>
        <!-- interestingly, this is translated to a directory, as in:
             Salsify/Connect/Helper -->
        <class>Salsify_Connect_Helper</class>
      </salsify_connect>
    </helpers>

    <models>
      <salsify_connect>
        <!-- also specifies a directory -->
        <class>Salsify_Connect_Model</class>
        <!-- reference to XML element below. just needs to be unique -->
        <resourceModel>salsify_connect_resource</resourceModel>
      </salsify_connect>
      <salsify_connect_resource>
        <!-- also specifies a directory -->
        <class>Salsify_Connect_Model_Resource</class>
        <entities>
          <configuration>
            <!-- table == DB table. basically we call the node 'configuration'
                 but really it's salsify_connect/configuration for reference in
                 magento, and 'salsify_connect_configuration' in the DB -->
            <table>salsify_connect_configuration</table>
          </configuration>
          <import_run>
            <table>salsify_connect_import_run</table>
          </import_run>
          <export_run>
            <table>salsify_connect_export_run</table>
          </export_run>
          <attribute_mapping>
            <table>salsify_connect_attribute_mapping</table>
          </attribute_mapping>
          <image_mapping>
            <table>salsify_connect_image_mapping</table>
          </image_mapping>
          <accessorycategory_mapping>
            <table>salsify_connect_accessorycategory_mapping</table>
          </accessorycategory_mapping>
          <accessory_mapping>
            <table>salsify_connect_accessory_mapping</table>
          </accessory_mapping>
        </entities>
      </salsify_connect_resource>
    </models>

    <resources>
      <salsify_connect_setup>
        <setup>
          <module>Salsify_Connect</module>
          <!-- full path to setup file, Setup.php -->
          <class>Salsify_Connect_Model_Resource_Setup</class>
        </setup>
      </salsify_connect_setup>
    </resources>

    <!-- TODO finish the eventing system -->
    <events>
      <catalog_product_save_after>
        <observers>
          <salsify_connect>
            <class>salsify_connect/observer</class>
            <method>logUpdate</method>
            <type>singleton</type>
          </salsify_connect>
        </observers>
      </catalog_product_save_after>
    </events>

    <blocks>
      <salsify_connect>
        <!-- also specifies a directory -->
        <class>Salsify_Connect_Block</class>
      </salsify_connect>
    </blocks>

  </global>


  <admin>
    <routers>
      <salsify_connect>
        <use>admin</use>
        <args>
          <module>Salsify_Connect</module>
          <!-- name of the adminhtml path, so index.php/salsify/* -->
          <frontName>salsify</frontName>
        </args>
      </salsify_connect>
    </routers>
  </admin>


  <adminhtml>
    <!-- This cannot be moved to adminhtml.xml. hard lesson. -->
    <layout>
      <updates>
        <salsify_connect>
          <!-- could be named anything. we're trying to be good citizens.
               note that if the file doesn't exist, this fails silently. the
               only way you can tell is that the layout doesn't show up. -->
          <file>salsify/connect.xml</file>
        </salsify_connect>
      </updates>
    </layout>
  </adminhtml>

</config>